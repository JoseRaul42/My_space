@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<canvas id="@_canvasId" class="shader-canvas"></canvas>

@code {
    private string _canvasId = $"shader-canvas-{Guid.NewGuid():N}";
    private IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Attempting to load shader module...");
                _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/shader.js");
                Console.WriteLine("Shader module loaded successfully.");
                await _module.InvokeVoidAsync("initializeMatrix", _canvasId);
                Console.WriteLine("Shader initialized.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing shader: {ex.Message}");
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }
}
