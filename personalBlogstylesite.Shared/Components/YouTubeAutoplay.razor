@using Microsoft.AspNetCore.Components
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div id="@_wrapperId" class="yt-wrap @(Minimized ? "min" : "")">
    <div id="@_handleId" class="yt-head" style="cursor: move;">
        <strong>Now Playing</strong>
        <div class="spacer"></div>
        <button class="btn" @onclick="ToggleMinimized">@((Minimized ? "Expand" : "Minimize"))</button>
    </div>

    <div class="yt-frame">
        <div id="@_containerId"></div>
    </div>

    <div class="yt-controls">
        <button class="btn primary" @onclick="ToggleMute" disabled="@(!_isPlayerReady)">
            @(_isMuted ? "ðŸ”Š Unmute" : "ðŸ”‡ Mute")
        </button>
        <button class="btn" @onclick="Restart" disabled="@(!_isPlayerReady)">âŸ² Restart</button>
    </div>
</div>

@code {
    [Parameter] public string? VideoId { get; set; }
    [Parameter] public bool Autoplay { get; set; } = true;
    [Parameter] public bool Loop { get; set; } = true;
    [Parameter] public bool Minimized { get; set; } = false;

    private readonly string _containerId = $"yt-player-{Guid.NewGuid():N}";
    private readonly string _wrapperId = $"yt-wrapper-{Guid.NewGuid():N}";
    private readonly string _handleId = $"yt-handle-{Guid.NewGuid():N}";
    private IJSObjectReference? _playerModule;
    private IJSObjectReference? _draggableModule;
    private DotNetObjectReference<YouTubeAutoplay>? _dotNetHelper;
    
    private bool _isMuted = true;
    private bool _isPlayerReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _dotNetHelper = DotNetObjectReference.Create(this);
                _playerModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/personalBlogstylesite.Shared/js/youtubePlayerInterop.js");
                await _playerModule.InvokeVoidAsync("createPlayer", _dotNetHelper, _containerId, VideoId ?? "_iTfoFLz5nA", Loop, Autoplay);

                _draggableModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/personalBlogstylesite.Shared/js/draggableInterop.js");
                await _draggableModule.InvokeVoidAsync("initDraggable", _wrapperId, _handleId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load YouTube player module: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public void OnPlayerReady()
    {
        _isPlayerReady = true;
        StateHasChanged();
    }

    private async Task ToggleMute()
    {
        if (_playerModule is not null)
        {
            _isMuted = !_isMuted;
            await _playerModule.InvokeVoidAsync("toggleMute", _containerId, _isMuted);
        }
    }

    private async Task Restart()
    {
        if (_playerModule is not null)
        {
            await _playerModule.InvokeVoidAsync("restart", _containerId);
        }
    }

    private void ToggleMinimized() => Minimized = !Minimized;

    public async ValueTask DisposeAsync()
    {
        _dotNetHelper?.Dispose();
        if (_playerModule is not null)
        {
            try
            {
                // It's possible the JS side is already gone if the user navigated away quickly.
                await _playerModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // This is expected if the circuit is already gone. Do nothing.
            }
        }
        if (_draggableModule is not null)
        {
            await _draggableModule.DisposeAsync();
        }
    }
}
